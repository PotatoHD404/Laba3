    set_target_properties(Laba3 PROPERTIES LINK_FLAGS "--bind -s WASM=1 -O2 -std=c++20 -s EXPORT_ES6=1 \
      -s ENVIRONMENT='web' -s EXPORTED_RUNTIME_METHODS=['func']\
     -o Laba4.js")
    if (${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
        set_target_properties(Laba3 PROPERTIES LINK_FLAGS "--bind -s EXPORT_ES6=1 -O2 -s WASM=1 -s MODULARIZE=1\
         -s ASSERTIONS=1 -s EXPORTED_RUNTIME_METHODS=['add'] -s EXPORT_NAME='Laba3' -s DISABLE_EXCEPTION_CATCHING=0\
         -s ALLOW_MEMORY_GROWTH=1 -s ENVIRONMENT='web' -s MALLOC=emmalloc -s STRICT=1 -o Laba3.js --no-entry -s NODERAWFS=1")


         #include <iostream>

         #ifdef __EMSCRIPTEN__
         #include <emscripten.h>
         #include <emscripten/bind.h>
         #endif

         using namespace std;

         #ifdef __EMSCRIPTEN__
         EM_JS(string, do_fetch, (), {
         return Asyncify.handleAsync(async () => {
                   out("waiting for a fetch");
                 let res = "promise";
                 out("got the fetch response");
                 Module.promiseResolve = "sas1";
                 return res;
         });
         });
         //EM_JS(string, do_fetch, (),{
         //      return Asyncify.handleAsync(async () =>  {
         //          out("waiting for a fetch");
         //        let res = "promise";
         //        out("got the fetch response");
         //        Module.promiseResolve = "sas1";
         //        return res;
         //        });
         //
         //});
         //MAIN_THREAD_ASYNC_EM_ASM(Module.print('Inside MAIN_THREAD_ASYNC_EM_ASM: ' + $0 + ' ' + $1), 42, 3.5);
         #else

         string do_fetch() {
             string res;
             getline(cin, res);
             return res;
         }

         #endif


         int say_hello(int a, int b) {
         //    for (int i = 0; i < 1000000; ++i) {
         //        int *c = new int[1024]();
         //        if (i % 10000 == 0)
         //            cout << 4.0 * i * 1024 / 1024 / 1024 << endl;
         ////        delete[] c;
         //    }
         //    int *c = new int[1024 * 1024 * 256]();
         //    delete[] c;
             string res = do_fetch();
         //#ifdef __EMSCRIPTEN__
         //    MAIN_THREAD_EM_ASM(Module.promiseResolve = "sas";);
         //#endif
             cout << "Hello from your wasm module " << a + b << endl;

             return a;
         }

         int main() {
             printf("hello, world!\n");
             return 0;
         }


         #ifdef __EMSCRIPTEN__
         EMSCRIPTEN_BINDINGS(Laba3) {
                 emscripten::function("sayHello", &say_hello, emscripten::allow_raw_pointers());
         }
         #endif




if (${CMAKE_SYSTEM_NAME} MATCHES "Emscripten")
#    set(CMAKE_EXECUTABLE_SUFFIX .mjs)
    set_target_properties(Laba3 PROPERTIES LINK_FLAGS "\
    -s WASM=1 \
    --bind \
    -s ALLOW_MEMORY_GROWTH \
    -s MALLOC=emmalloc \
    -s ASSERTIONS \
    -s EXPORT_ES6 \
    -s ENVIRONMENT='node' \
    -s MODULARIZE \
    -s NO_USE_ES6_IMPORT_META \
    -s ASYNCIFY \
    -s 'ASYNCIFY_IMPORTS=[\"do_fetch\"]'")